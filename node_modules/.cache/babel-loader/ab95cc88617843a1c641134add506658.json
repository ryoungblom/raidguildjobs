{"ast":null,"code":"var _jsxFileName = \"/Users/reuben/Desktop/work/blueVista/ethereum/climateth/src/pages/countries.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport '../css/countries.css';\nimport Web3 from 'web3';\nimport { COUNTRY_ABI, COUNTRY_ADDRESS } from '../config.js';\nimport NewCountry from '../components/addCountry.js';\n\nclass Countries extends Component {\n  async componentWillMount() {\n    await this.runWeb3();\n    await this.blockchain();\n    await this.getData();\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    document.title = \"react-web3\";\n  }\n\n  async componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      balance: '',\n      countries: [],\n      headers: [\"ID\", \"Name\", \"Total CO2 Emissions\", \"Per Capita CO2 Emissions\", \"Environmental Performance Index\", \"Environmental Health Index\", \"Eco Vitality Index\", \"Edit\"],\n      loading: true,\n      editing: false\n    };\n    this.renderTableData = this.renderTableData.bind(this);\n    this.renderTableHeader = this.renderTableHeader.bind(this);\n    this.editing = this.editing.bind(this);\n  }\n\n  async isInstalled() {\n    if (typeof Web3 !== 'undefined') {\n      console.log('Web3 Provider is installed');\n    } else {\n      console.log('No Web3 Provider!');\n    }\n  }\n\n  async isLocked(web3) {\n    web3.eth.getAccounts(function (err, accounts) {\n      if (err != null) {\n        console.log(err);\n      } else if (accounts.length === 0) {\n        console.log('Web3 Provider is locked');\n      } else {\n        console.log('Web3 Provider is unlocked');\n      }\n    });\n  }\n\n  async runWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. Please install MetaMask or similar!');\n    }\n  }\n\n  async blockchain() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    this.isInstalled();\n    this.isLocked(web3);\n    const countryData = new web3.eth.Contract(COUNTRY_ABI, COUNTRY_ADDRESS);\n    this.setState({\n      countryData\n    });\n    const accounts = await web3.eth.getAccounts();\n    const balanceInWei = await web3.eth.getBalance(accounts[0]);\n    var balance = balanceInWei / 1000000000000000000;\n    var account = accounts[0];\n    console.log(\"Account: \" + account);\n    console.log(\"Balance: \" + balance);\n    this.setState({\n      account: accounts[0],\n      balance: balance,\n      loading: false,\n      editing: false\n    });\n  }\n\n  async getData() {\n    var countryCount = await this.state.countryData.methods.countryCount().call();\n\n    for (var i = 0; i < countryCount; i++) {\n      const singleCountry = await this.state.countryData.methods.countries(i).call();\n      this.setState({\n        countries: [...this.state.countries, singleCountry]\n      });\n    }\n  }\n\n  async updateCountry(id, name, total, perCap, epi, eh, ev) {\n    this.state.countryData.methods.updateCountry(id, name, total, perCap, epi, eh, ev).send({\n      from: this.state.account\n    });\n  }\n  /*\n  { this.state.loading\n    ? <div id=\"loader\" className=\"\"><p className=\"\">Communicating with blockchain...</p></div>\n    : <Thought\n      thoughts={this.state.thoughts}\n      createThought={this.createThought}\n      hand = {this.state.currentHandle}\n      acct = {this.state.account}\n     />\n   }\n  */\n\n\n  editing(country) {\n    //this.setState({ editing: true })\n    console.log(country);\n    this.setState({\n      editing: false\n    });\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  renderTableData() {\n    return this.state.countries.map((eachCountry, index) => {\n      const {\n        id,\n        country,\n        totalCO2,\n        perCapCO2,\n        envPerfIndex,\n        envHealth,\n        ecoVitality\n      } = eachCountry; //destructuring\n\n      return React.createElement(\"tr\", {\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, country), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, totalCO2), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, perCapCO2), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, envPerfIndex), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, envHealth), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, ecoVitality), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \" Edit \")));\n    });\n  }\n  /*\n     async renderTableHeader() {\n        let header = Object.keys(this.state.headers)\n        return header.map((key, index) => {\n           return <th key={index}>{key.toUpperCase()}</th>\n        })\n     }\n     */\n\n\n  renderTableHeader() {\n    return this.state.headers.map((label, index) => {\n      return React.createElement(\"th\", {\n        key: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, label.toUpperCase());\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tableFlex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Carbon Data by Country\"), React.createElement(\"table\", {\n      id: \"countries\",\n      className: \"countryTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, this.renderTableHeader()), this.state.editing ? React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"loading\") : this.renderTableData()))), React.createElement(NewCountry, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"paddedDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Countries;","map":{"version":3,"sources":["/Users/reuben/Desktop/work/blueVista/ethereum/climateth/src/pages/countries.js"],"names":["React","Component","Web3","COUNTRY_ABI","COUNTRY_ADDRESS","NewCountry","Countries","componentWillMount","runWeb3","blockchain","getData","forceUpdate","componentDidMount","document","title","componentWillUnmount","clearInterval","interval","constructor","props","state","account","balance","countries","headers","loading","editing","renderTableData","bind","renderTableHeader","isInstalled","console","log","isLocked","web3","eth","getAccounts","err","accounts","length","window","ethereum","enable","currentProvider","alert","givenProvider","countryData","Contract","setState","balanceInWei","getBalance","countryCount","methods","call","i","singleCountry","updateCountry","id","name","total","perCap","epi","eh","ev","send","from","country","handleClick","e","preventDefault","map","eachCountry","index","totalCO2","perCapCO2","envPerfIndex","envHealth","ecoVitality","label","toUpperCase","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport '../css/countries.css'\nimport Web3 from 'web3'\n\nimport { COUNTRY_ABI, COUNTRY_ADDRESS } from '../config.js'\n\nimport NewCountry from '../components/addCountry.js'\n\nclass Countries extends Component {\n\n  async componentWillMount() {\n    await this.runWeb3()\n    await this.blockchain()\n    await this.getData()\n    this.forceUpdate()\n  }\n\n\n  componentDidMount(){\n    document.title = \"react-web3\"\n  }\n\n\n  async componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      balance: '',\n      countries: [],\n      headers: [\n        \"ID\",\n        \"Name\",\n        \"Total CO2 Emissions\",\n        \"Per Capita CO2 Emissions\",\n        \"Environmental Performance Index\",\n        \"Environmental Health Index\",\n        \"Eco Vitality Index\",\n        \"Edit\"],\n      loading: true,\n      editing: false\n    }\n\n    this.renderTableData = this.renderTableData.bind(this)\n    this.renderTableHeader = this.renderTableHeader.bind(this)\n    this.editing = this.editing.bind(this)\n  }\n\n\n  async isInstalled() {\n     if (typeof Web3 !== 'undefined'){\n        console.log('Web3 Provider is installed')\n     }\n     else{\n        console.log('No Web3 Provider!')\n     }\n  }\n\n  async isLocked(web3) {\n     web3.eth.getAccounts(function(err, accounts){\n        if (err != null) {\n           console.log(err)\n        }\n        else if (accounts.length === 0) {\n           console.log('Web3 Provider is locked')\n        }\n        else {\n           console.log('Web3 Provider is unlocked')\n        }\n     });\n  }\n\n\n  async runWeb3() {\n\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. Please install MetaMask or similar!')\n    }\n  }\n\n\n  async blockchain() {\n\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n\n    this.isInstalled();\n    this.isLocked(web3);\n\n    const countryData = new web3.eth.Contract(COUNTRY_ABI, COUNTRY_ADDRESS)\n\n    this.setState({ countryData })\n\n    const accounts = await web3.eth.getAccounts()\n    const balanceInWei = await web3.eth.getBalance(accounts[0])\n    var balance = balanceInWei/1000000000000000000\n    var account = accounts[0]\n\n    console.log(\"Account: \" + account)\n    console.log(\"Balance: \" + balance)\n\n    this.setState({ account: accounts[0], balance: balance, loading: false, editing: false })\n  }\n\n\n  async getData() {\n\n    var countryCount = await this.state.countryData.methods.countryCount().call()\n\n    for (var i = 0; i < countryCount; i++) {\n      const singleCountry = await this.state.countryData.methods.countries(i).call()\n      this.setState({\n        countries: [...this.state.countries, singleCountry]\n      })\n    }\n  }\n\n\n  async updateCountry(id, name, total, perCap, epi, eh, ev) {\n    this.state.countryData.methods.updateCountry(id, name, total, perCap, epi, eh, ev).send({ from: this.state.account })\n  }\n\n  /*\n  { this.state.loading\n    ? <div id=\"loader\" className=\"\"><p className=\"\">Communicating with blockchain...</p></div>\n    : <Thought\n      thoughts={this.state.thoughts}\n      createThought={this.createThought}\n      hand = {this.state.currentHandle}\n      acct = {this.state.account}\n     />\n\n  }\n  */\n\n  editing(country) {\n    //this.setState({ editing: true })\n\n    console.log(country)\n\n    this.setState({ editing: false })\n  }\n\n\n  handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n\n  renderTableData() {\n      return this.state.countries.map((eachCountry, index) => {\n         const { id, country, totalCO2, perCapCO2, envPerfIndex, envHealth, ecoVitality } = eachCountry //destructuring\n         return (\n            <tr key={id}>\n               <td>{id}</td>\n               <td>{country}</td>\n               <td>{totalCO2}</td>\n               <td>{perCapCO2}</td>\n               <td>{envPerfIndex}</td>\n               <td>{envHealth}</td>\n               <td>{ecoVitality}</td>\n               <td>\n                <button onClick={this.handleClick}> Edit </button>\n               </td>\n            </tr>\n         )\n      })\n   }\n\n/*\n   async renderTableHeader() {\n      let header = Object.keys(this.state.headers)\n      return header.map((key, index) => {\n         return <th key={index}>{key.toUpperCase()}</th>\n      })\n   }\n   */\n\n   renderTableHeader() {\n      return this.state.headers.map((label, index) => {\n         return <th key={label}>{label.toUpperCase()}</th>\n      })\n   }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <div className = \"tableFlex\">\n            <h1 id='title'>Carbon Data by Country</h1>\n            <table id='countries' className=\"countryTable\">\n              <tbody>\n                <tr>{this.renderTableHeader()}</tr>\n\n                  {this.state.editing ? <span>loading</span> :\n                  this.renderTableData()\n                  }\n\n              </tbody>\n            </table>\n          </div>\n\n          <NewCountry />\n\n          <div className=\"paddedDiv\" />\n\n        </header>\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default Countries;\n"]},"metadata":{},"sourceType":"module"}