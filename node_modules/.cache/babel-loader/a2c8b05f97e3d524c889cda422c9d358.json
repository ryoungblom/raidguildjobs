{"ast":null,"code":"var _jsxFileName = \"/Users/reuben/Desktop/work/blueVista/ethereum/climateth/src/pages/history.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport '../css/countries.css';\nimport Web3 from 'web3';\nimport { COUNTRY_ABI, COUNTRY_ADDRESS } from '../config.js';\n\nclass History extends Component {\n  async componentWillMount() {\n    await this.runWeb3();\n    await this.blockchain();\n    await this.getData();\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    document.title = \"react-web3\";\n  }\n\n  async componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      balance: '',\n      countries: [],\n      historyHeaders: [\"ID\", \"Name\"],\n      headers: [\"ID\", \"Name\", \"Total CO2 Emissions\", \"Per Capita CO2 Emissions\", \"Environmental Performance Index\", \"Environmental Health Index\", \"Eco Vitality Index\", \"Edit\"],\n      loading: true,\n      showHistory: false,\n      editing: false,\n      updating: 0\n    };\n    this.renderTableData = this.renderTableData.bind(this);\n    this.renderEditData = this.renderEditData.bind(this);\n    this.renderTableHeader = this.renderTableHeader.bind(this);\n    this.editing = this.editing.bind(this);\n    this.showEditHistory = this.showEditHistory.bind(this);\n  }\n\n  async isInstalled() {\n    if (typeof Web3 !== 'undefined') {\n      console.log('Web3 Provider is installed');\n    } else {\n      console.log('No Web3 Provider!');\n    }\n  }\n\n  async isLocked(web3) {\n    web3.eth.getAccounts(function (err, accounts) {\n      if (err != null) {\n        console.log(err);\n      } else if (accounts.length === 0) {\n        console.log('Web3 Provider is locked');\n      } else {\n        console.log('Web3 Provider is unlocked');\n      }\n    });\n  }\n\n  async runWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. Please install MetaMask or similar!');\n    }\n  }\n\n  async blockchain() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    this.isInstalled();\n    this.isLocked(web3);\n    const countryData = new web3.eth.Contract(COUNTRY_ABI, COUNTRY_ADDRESS);\n    this.setState({\n      countryData\n    });\n    const accounts = await web3.eth.getAccounts();\n    const balanceInWei = await web3.eth.getBalance(accounts[0]);\n    var balance = balanceInWei / 1000000000000000000;\n    var account = accounts[0];\n    console.log(\"Account: \" + account);\n    console.log(\"Balance: \" + balance);\n    this.setState({\n      account: accounts[0],\n      balance: balance,\n      loading: false,\n      editing: false\n    });\n  }\n\n  async getData() {\n    var countryCount = await this.state.countryData.methods.countryCount().call();\n\n    for (var i = 0; i < countryCount; i++) {\n      const singleCountry = await this.state.countryData.methods.countries(i).call();\n      this.setState({\n        countries: [...this.state.countries, singleCountry]\n      });\n    }\n  }\n\n  async updateCountry(id, name, total, perCap, epi, eh, ev) {\n    this.setState({\n      loading: false\n    });\n    await this.state.countryData.methods.updateCountry(id, name, total, perCap, epi, eh, ev).send({\n      from: this.state.account\n    });\n    this.setState({\n      editing: false\n    });\n    this.setState({\n      loading: true\n    });\n  }\n  /*\n  { this.state.loading\n    ? <div id=\"loader\" className=\"\"><p className=\"\">Communicating with blockchain...</p></div>\n    : <Thought\n      thoughts={this.state.thoughts}\n      createThought={this.createThought}\n      hand = {this.state.currentHandle}\n      acct = {this.state.account}\n     />\n   }\n  */\n\n\n  async showEditHistory(country) {\n    this.setState({\n      showHistory: true\n    });\n    console.log(country);\n    alert(country);\n  }\n\n  editing(country) {\n    this.setState({\n      updating: country\n    });\n    this.setState({\n      editing: true\n    });\n  }\n\n  renderEditData(toUpdate) {\n    return this.state.countries.map((eachCountry, index) => {\n      const {\n        id,\n        country,\n        totalCO2,\n        perCapCO2,\n        envPerfIndex,\n        envHealth,\n        ecoVitality\n      } = eachCountry; //destructuring\n\n      if (id == toUpdate) {\n        return React.createElement(\"tr\", {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, id), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, country), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"sendForm\",\n          id: \"updateCountryForm\",\n          onSubmit: event => {\n            event.preventDefault();\n            this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          ref: input => this.newTotal = input,\n          type: \"text\",\n          className: \"addCountryForm\",\n          defaultValue: totalCO2,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }))), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"sendForm\",\n          id: \"updateCountryForm\",\n          onSubmit: event => {\n            event.preventDefault();\n            this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          ref: input => this.newPerCap = input,\n          type: \"text\",\n          className: \"addCountryForm\",\n          defaultValue: perCapCO2,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }))), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"sendForm\",\n          id: \"updateCountryForm\",\n          onSubmit: event => {\n            event.preventDefault();\n            this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          ref: input => this.newEPI = input,\n          type: \"text\",\n          className: \"addCountryForm\",\n          defaultValue: envPerfIndex,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }))), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"sendForm\",\n          id: \"updateCountryForm\",\n          onSubmit: event => {\n            event.preventDefault();\n            this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          ref: input => this.newEH = input,\n          type: \"text\",\n          className: \"addCountryForm\",\n          defaultValue: envHealth,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }))), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"sendForm\",\n          id: \"updateCountryForm\",\n          onSubmit: event => {\n            event.preventDefault();\n            this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          ref: input => this.newEV = input,\n          type: \"text\",\n          className: \"addCountryForm\",\n          defaultValue: ecoVitality,\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }))), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"submit\",\n          hidden: false,\n          form: \"updateCountryForm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        })));\n      } else {\n        return React.createElement(\"tr\", {\n          key: id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, id), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, country), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, totalCO2), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }, perCapCO2), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, envPerfIndex), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }, envHealth), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, ecoVitality), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, \" Submit \")));\n      }\n    });\n  }\n\n  renderTableData() {\n    return this.state.countries.map((eachCountry, index) => {\n      const {\n        id,\n        country,\n        totalCO2,\n        perCapCO2,\n        envPerfIndex,\n        envHealth,\n        ecoVitality\n      } = eachCountry; //destructuring\n\n      return React.createElement(\"tr\", {\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, id), React.createElement(\"td\", {\n        onClick: () => this.showEditHistory(country),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, country));\n    });\n  }\n  /*\n     async renderTableHeader() {\n        let header = Object.keys(this.state.headers)\n        return header.map((key, index) => {\n           return <th key={index}>{key.toUpperCase()}</th>\n        })\n     }\n     */\n\n\n  renderTableHeader() {\n    return this.state.historyHeaders.map((label, index) => {\n      return React.createElement(\"th\", {\n        key: label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, label.toUpperCase());\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tableFlex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"Carbon Data History\"), React.createElement(\"table\", {\n      id: \"countries\",\n      className: \"countryTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, this.renderTableHeader()), this.state.editing ? this.renderEditData(this.state.updating) : this.renderTableData()))), this.state.showHistory ? React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"Show History\") : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"New Country Was Here\"), React.createElement(\"div\", {\n      className: \"paddedDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default History;","map":{"version":3,"sources":["/Users/reuben/Desktop/work/blueVista/ethereum/climateth/src/pages/history.js"],"names":["React","Component","Web3","COUNTRY_ABI","COUNTRY_ADDRESS","History","componentWillMount","runWeb3","blockchain","getData","forceUpdate","componentDidMount","document","title","componentWillUnmount","clearInterval","interval","constructor","props","state","account","balance","countries","historyHeaders","headers","loading","showHistory","editing","updating","renderTableData","bind","renderEditData","renderTableHeader","showEditHistory","isInstalled","console","log","isLocked","web3","eth","getAccounts","err","accounts","length","window","ethereum","enable","currentProvider","alert","givenProvider","countryData","Contract","setState","balanceInWei","getBalance","countryCount","methods","call","i","singleCountry","updateCountry","id","name","total","perCap","epi","eh","ev","send","from","country","toUpdate","map","eachCountry","index","totalCO2","perCapCO2","envPerfIndex","envHealth","ecoVitality","event","preventDefault","newTotal","value","newPerCap","newEPI","newEH","newEV","input","label","toUpperCase","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport '../css/countries.css'\nimport Web3 from 'web3'\n\nimport { COUNTRY_ABI, COUNTRY_ADDRESS } from '../config.js'\n\nclass History extends Component {\n\n  async componentWillMount() {\n    await this.runWeb3()\n    await this.blockchain()\n    await this.getData()\n    this.forceUpdate()\n  }\n\n\n  componentDidMount(){\n    document.title = \"react-web3\"\n  }\n\n\n  async componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      balance: '',\n      countries: [],\n      historyHeaders: [\n        \"ID\",\n        \"Name\"],\n      headers: [\n        \"ID\",\n        \"Name\",\n        \"Total CO2 Emissions\",\n        \"Per Capita CO2 Emissions\",\n        \"Environmental Performance Index\",\n        \"Environmental Health Index\",\n        \"Eco Vitality Index\",\n        \"Edit\"],\n      loading: true,\n      showHistory: false,\n      editing: false,\n      updating: 0\n    }\n\n    this.renderTableData = this.renderTableData.bind(this)\n    this.renderEditData = this.renderEditData.bind(this)\n    this.renderTableHeader = this.renderTableHeader.bind(this)\n    this.editing = this.editing.bind(this)\n    this.showEditHistory = this.showEditHistory.bind(this)\n  }\n\n\n  async isInstalled() {\n     if (typeof Web3 !== 'undefined'){\n        console.log('Web3 Provider is installed')\n     }\n     else{\n        console.log('No Web3 Provider!')\n     }\n  }\n\n  async isLocked(web3) {\n     web3.eth.getAccounts(function(err, accounts){\n        if (err != null) {\n           console.log(err)\n        }\n        else if (accounts.length === 0) {\n           console.log('Web3 Provider is locked')\n        }\n        else {\n           console.log('Web3 Provider is unlocked')\n        }\n     });\n  }\n\n\n  async runWeb3() {\n\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. Please install MetaMask or similar!')\n    }\n  }\n\n\n  async blockchain() {\n\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n\n    this.isInstalled();\n    this.isLocked(web3);\n\n    const countryData = new web3.eth.Contract(COUNTRY_ABI, COUNTRY_ADDRESS)\n\n    this.setState({ countryData })\n\n    const accounts = await web3.eth.getAccounts()\n    const balanceInWei = await web3.eth.getBalance(accounts[0])\n    var balance = balanceInWei/1000000000000000000\n    var account = accounts[0]\n\n    console.log(\"Account: \" + account)\n    console.log(\"Balance: \" + balance)\n\n    this.setState({ account: accounts[0], balance: balance, loading: false, editing: false })\n  }\n\n\n  async getData() {\n\n    var countryCount = await this.state.countryData.methods.countryCount().call()\n\n    for (var i = 0; i < countryCount; i++) {\n      const singleCountry = await this.state.countryData.methods.countries(i).call()\n      this.setState({\n        countries: [...this.state.countries, singleCountry]\n      })\n    }\n  }\n\n\n  async updateCountry(id, name, total, perCap, epi, eh, ev) {\n\n    this.setState({loading:false})\n\n    await this.state.countryData.methods.updateCountry(id, name, total, perCap, epi, eh, ev).send({ from: this.state.account })\n\n    this.setState({ editing: false })\n\n    this.setState({loading:true})\n  }\n\n  /*\n  { this.state.loading\n    ? <div id=\"loader\" className=\"\"><p className=\"\">Communicating with blockchain...</p></div>\n    : <Thought\n      thoughts={this.state.thoughts}\n      createThought={this.createThought}\n      hand = {this.state.currentHandle}\n      acct = {this.state.account}\n     />\n\n  }\n  */\n\n  async showEditHistory(country) {\n\n    this.setState({ showHistory: true })\n\n    console.log(country)\n    alert(country)\n\n  }\n\n\n  editing(country) {\n\n    this.setState({ updating: country })\n    this.setState({ editing: true })\n\n  }\n\n\n  renderEditData(toUpdate) {\n\n      return this.state.countries.map((eachCountry, index) => {\n         const { id, country, totalCO2, perCapCO2, envPerfIndex, envHealth, ecoVitality } = eachCountry //destructuring\n\n         if (id == toUpdate) {\n           return (\n                <tr key={id}>\n                   <td>{id}</td>\n\n                   <td>{country}</td>\n\n                   <td>\n                    <form className = \"sendForm\" id=\"updateCountryForm\" onSubmit={(event) => {\n                     event.preventDefault()\n                     this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value)\n                    }}>\n                      <input ref={(input) => this.newTotal = input} type=\"text\" className=\"addCountryForm\" defaultValue={totalCO2} required />\n                    </form>\n                   </td>\n\n                   <td>\n                     <form className = \"sendForm\" id=\"updateCountryForm\" onSubmit={(event) => {\n                      event.preventDefault()\n                      this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value)\n                     }}>\n                       <input ref={(input) => this.newPerCap = input} type=\"text\" className=\"addCountryForm\" defaultValue={perCapCO2} required />\n                     </form>\n                   </td>\n\n                   <td>\n                     <form className = \"sendForm\" id=\"updateCountryForm\" onSubmit={(event) => {\n                      event.preventDefault()\n                      this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value)\n                     }}>\n                       <input ref={(input) => this.newEPI = input} type=\"text\" className=\"addCountryForm\" defaultValue={envPerfIndex} required />\n                     </form>\n                   </td>\n\n                   <td>\n                     <form className = \"sendForm\" id=\"updateCountryForm\" onSubmit={(event) => {\n                      event.preventDefault()\n                      this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value)\n                     }}>\n                       <input ref={(input) => this.newEH = input} type=\"text\" className=\"addCountryForm\" defaultValue={envHealth} required />\n                     </form>\n                   </td>\n\n                   <td>\n                     <form className = \"sendForm\" id=\"updateCountryForm\" onSubmit={(event) => {\n                      event.preventDefault()\n                      this.updateCountry(id, country, this.newTotal.value, this.newPerCap.value, this.newEPI.value, this.newEH.value, this.newEV.value)\n                     }}>\n                       <input ref={(input) => this.newEV = input} type=\"text\" className=\"addCountryForm\" defaultValue={ecoVitality} required />\n                     </form>\n                   </td>\n\n                   <td>\n                    <input type=\"submit\" hidden={false} form=\"updateCountryForm\"/>\n                   </td>\n                </tr>\n           )\n         }\n\n         else {\n           return (\n              <tr key={id}>\n                 <td>{id}</td>\n                 <td>{country}</td>\n                 <td>{totalCO2}</td>\n                 <td>{perCapCO2}</td>\n                 <td>{envPerfIndex}</td>\n                 <td>{envHealth}</td>\n                 <td>{ecoVitality}</td>\n                 <td>\n                  <button> Submit </button>\n                 </td>\n              </tr>\n           )\n         }\n      })\n   }\n\n\n  renderTableData() {\n      return this.state.countries.map((eachCountry, index) => {\n         const { id, country, totalCO2, perCapCO2, envPerfIndex, envHealth, ecoVitality } = eachCountry //destructuring\n         return (\n            <tr key={id}>\n               <td>{id}</td>\n               <td onClick={() => this.showEditHistory(country)}>{country}</td>\n            </tr>\n         )\n      })\n   }\n\n/*\n   async renderTableHeader() {\n      let header = Object.keys(this.state.headers)\n      return header.map((key, index) => {\n         return <th key={index}>{key.toUpperCase()}</th>\n      })\n   }\n   */\n\n   renderTableHeader() {\n      return this.state.historyHeaders.map((label, index) => {\n         return <th key={label}>{label.toUpperCase()}</th>\n      })\n   }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <div className = \"tableFlex\">\n            <h1 id='title'>Carbon Data History</h1>\n            <table id='countries' className=\"countryTable\">\n              <tbody>\n                <tr>{this.renderTableHeader()}</tr>\n\n                  {this.state.editing ? this.renderEditData(this.state.updating) :\n                  this.renderTableData()\n                  }\n\n              </tbody>\n            </table>\n          </div>\n\n          {this.state.showHistory ? <span>Show History</span> :\n          <span>New Country Was Here</span>\n          }\n\n          <div className=\"paddedDiv\" />\n\n        </header>\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default History;\n"]},"metadata":{},"sourceType":"module"}